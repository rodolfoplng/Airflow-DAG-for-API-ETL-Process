version: "3.8"

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.9.3
  # Keep the same user inside & outside containers to avoid permission issues
  user: "${AIRFLOW_UID:-50000}:0"
  env_file:
    - .env
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__WEBSERVER__RBAC: "True"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: "120"
    # Pass API key to all services so tasks can read it via env
    AVIATIONSTACK_API_KEY: "${AVIATIONSTACK_API_KEY}"
    # Install extra Python deps at container start
    _PIP_ADDITIONAL_REQUIREMENTS: >
      pandas==2.2.2
      requests==2.32.3
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./requirements.txt:/requirements.txt
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      start_period: 5s

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        python -m pip install --no-cache-dir -r /requirements.txt
        airflow db init
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin
    restart: "no"

  webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      - webserver

volumes:
  postgres-db-volume:
